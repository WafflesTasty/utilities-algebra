package waffles.utils.algebra;

import waffles.utils.algebra.functions.Composite;
import waffles.utils.algebra.functions.Inverse;

/**
 * The {@code Functions} class provides static utility methods to generate {@code Function} objects.
 * The functions generated by this class tend to be transformations of other functions.
 *
 * @author Waffles
 * @since 18 Aug 2023
 * @version 1.0
 * 
 * 
 * @see Function
 */
public class Functions
{
	/**
	 * Returns the composite of a {@code Function} set.
	 * Whether each individual function is typed correctly
	 * is left up to the application.
	 * 
	 * @param func  a set of functions
	 * @return  a composite function
	 * 
	 * 
	 * @see Function
	 */
	public static <X, Y> Function<X, Y> composite(Function<?,?>... func)
	{
		return new Composite<>(func);
	}
	
	/**
	 * Returns the inverse of a {@code Function}.
	 * 
	 * @param func  a base function
	 * @return  an inverted function
	 * 
	 * 
	 * @see Function
	 */
	public static <X, Y> Function<X, Y> inverse(Function<Y, X> func)
	{
		return new Inverse<>(func);
	}
	
	
	/**
	 * Maps a target to its source {@code Function} through static access.
	 * This function is not type-safe, allowing dynamic casting to be used.
	 * 
	 * @param f  a function to map with
	 * @param val  a target element
	 * @return  a source element
	 * 
	 * 
	 * @see Function
	 */
	public static <X, Y> X unmap(Function<X, Y> f, Object val)
	{
		return f.unmap((Y) val);
	}
	
	/**
	 * Maps a source to its target {@code Function} through static access.
	 * This function is not type-safe, allowing dynamic casting to be used.
	 * 
	 * @param f  a function to map with
	 * @param val  a source element
	 * @return  a target element
	 */
	public static <X, Y> Y map(Function<X, Y> f, Object val)
	{
		return f.map((X) val);
	}
	
	
	private Functions()
	{
		// NOT APPLICABLE
	}
}